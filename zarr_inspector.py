#!/usr/bin/env python
#
# zarr_inspector.py
# A script to inspect the structure and metadata of a Zarr archive 
# generated by the modular fish tracking pipeline.
#
# Usage: python zarr_inspector.py /path/to/your/data.zarr
#
import zarr
import argparse
import json
import os
from rich.console import Console
from rich.table import Table
from rich.tree import Tree
from rich import box

# --- Helper Function ---
def format_bytes(size: int) -> str:
    """Converts bytes to a human-readable format (KB, MB, GB)."""
    if size is None or size == 0:
        return "0 B"
    power = 1024
    n = 0
    power_labels = {0: '', 1: 'K', 2: 'M', 3: 'G', 4: 'T'}
    while size >= power and n < len(power_labels) - 1:
        size /= power
        n += 1
    return f"{size:.2f} {power_labels[n]}B"

# --- Core Inspection Functions ---
def print_attributes_table(console: Console, title: str, attributes: zarr.attrs.Attributes):
    """Prints a formatted table of Zarr attributes."""
    if not attributes:
        console.print(f"\n[bold]{title}[/bold]: (No attributes)")
        return

    table = Table(title=title, box=box.ROUNDED, show_header=True, header_style="bold magenta")
    table.add_column("Attribute Key", style="dim", width=30)
    table.add_column("Value")

    for key, value in attributes.items():
        # Pretty-print dictionaries for readability
        if isinstance(value, dict):
            value_str = json.dumps(value, indent=2)
        else:
            value_str = str(value)
        table.add_row(key, value_str)

    console.print(table)

def print_datasets_summary(console: Console, title: str, group: zarr.hierarchy.Group):
    """Prints a summary table of datasets within a group."""
    datasets = {name: obj for name, obj in group.items() if isinstance(obj, zarr.core.Array)}

    if not datasets:
        console.print(f"\n[bold]{title}[/bold]: (No datasets in this group)")
        return

    table = Table(title=title, box=box.ROUNDED, show_header=True, header_style="bold magenta")
    table.add_column("Dataset Name", style="cyan", no_wrap=True)
    table.add_column("Shape", style="green")
    table.add_column("Chunks", style="yellow")
    table.add_column("Dtype", style="blue")
    table.add_column("Size", style="red", justify="right")
    table.add_column("Compressor")

    for name, dset in datasets.items():
        # Special handling for tracking_results to show column names
        extra_info = ""
        if 'column_names' in dset.attrs:
             extra_info = f"\n[dim i]Columns: {dset.attrs['column_names']}[/dim i]"

        table.add_row(
            name,
            str(dset.shape),
            str(dset.chunks),
            str(dset.dtype),
            format_bytes(dset.nbytes),
            str(dset.compressor) + extra_info
        )
    console.print(table)

def build_zarr_tree(group: zarr.hierarchy.Group, tree_branch: Tree):
    """Recursively builds a Rich Tree of the Zarr structure."""
    # Prioritize groups over datasets in the tree view
    group_items = sorted(list(group.groups()))
    dataset_items = sorted(list(group.arrays()))

    for name, grp_obj in group_items:
        branch = tree_branch.add(f":file_folder: [bold blue]{name}/[/bold blue]")
        build_zarr_tree(grp_obj, branch)
    
    for name, arr_obj in dataset_items:
        tree_branch.add(f":page_facing_up: [green]{name}[/green]  [dim]({arr_obj.shape}, {arr_obj.dtype})[/dim]")

def inspect_zarr_archive(zarr_path: str):
    """Main function to inspect a Zarr archive and print a detailed report."""
    console = Console()
    console.rule(f"[bold]Zarr Inspector: {os.path.abspath(zarr_path)}[/bold]", style="bold white")

    if not os.path.exists(zarr_path):
        console.print(f"\n[bold red]Error:[/bold red] Path does not exist: '{zarr_path}'")
        return
        
    try:
        root = zarr.open(zarr_path, mode='r')
    except Exception as e:
        console.print(f"\n[bold red]Error:[/bold red] Could not open Zarr archive at '{zarr_path}'.")
        console.print(f"Details: {e}")
        return

    # 1. Print the overall structure tree
    console.print("\n[bold] Archive Structure[/bold]")
    tree = Tree("[bold cyan]root[/bold cyan]")
    build_zarr_tree(root, tree)
    console.print(tree)
    console.rule(style="white")

    # 2. Inspect each group found in the archive, starting with the root
    groups_to_inspect = [('/', root)] + sorted([(name, grp) for name, grp in root.groups()])

    for name, group in groups_to_inspect:
        title = f"Inspecting Group: '{name}'"
        console.print(f"\n\n[bold white on blue] {title.center(80)} [/bold white on blue]")
        
        print_attributes_table(console, f"Attributes for Group '{name}'", group.attrs)
        print_datasets_summary(console, f"Datasets in Group '{name}'", group)

def main():
    parser = argparse.ArgumentParser(
        description="A script to inspect the structure and metadata of a Zarr archive generated by the fish tracking pipeline.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument("zarr_path", type=str, help="Path to the Zarr archive directory to inspect.")
    args = parser.parse_args()

    inspect_zarr_archive(args.zarr_path)

if __name__ == "__main__":
    main()